import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useCart } from "@/contexts/CartContext";
import { useAuth } from "@/contexts/AuthContext";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { toast } from "sonner";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Loader2, Tag } from "lucide-react";

const Checkout = () => {
  const { cart, totalAmount, clearCart } = useCart();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [couponCode, setCouponCode] = useState("");
  const [appliedCoupon, setAppliedCoupon] = useState<any>(null);
  const [discount, setDiscount] = useState(0);

  const [formData, setFormData] = useState({
    fullName: "",
    mobileNumber: "",
    alternativeMobileNumber: "",
    address: "",
    pincode: "",
    notes: ""
  });

  useEffect(() => {
    if (!user) {
      navigate("/auth");
      return;
    }
    if (cart.length === 0) {
      navigate("/cart");
      return;
    }
    
    // Load saved profile data
    loadProfile();
  }, [user, cart, navigate]);

  const loadProfile = async () => {
    if (!user) return;
    const { data } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', user.id)
      .maybeSingle();

    if (data) {
      setFormData({
        fullName: data.full_name || "",
        mobileNumber: data.mobile_number || "",
        alternativeMobileNumber: data.alternative_mobile_number || "",
        address: data.address || "",
        pincode: data.pincode || "",
        notes: ""
      });
    }
  };

  const handleApplyCoupon = async () => {
    if (!couponCode.trim()) {
      toast.error("Please enter a coupon code");
      return;
    }

    try {
      const { data, error } = await supabase.rpc('validate_coupon', {
        coupon_code_param: couponCode.toUpperCase(),
        order_amount: totalAmount
      });

      if (error) throw error;

      const result = data[0];
      if (result.is_valid) {
        setAppliedCoupon(couponCode.toUpperCase());
        setDiscount(Number(result.discount_amount) || 0);
        toast.success(result.message);
      } else {
        toast.error(result.message);
      }
    } catch (error: any) {
      toast.error("Failed to apply coupon");
      console.error(error);
    }
  };

  const handleRemoveCoupon = () => {
    setAppliedCoupon(null);
    setDiscount(0);
    setCouponCode("");
    toast.success("Coupon removed");
  };

  const finalAmount = totalAmount - discount;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user) return;
    
    setLoading(true);

    try {
      // Save/update user profile
      await supabase.from('user_profiles').upsert({
        id: user.id,
        full_name: formData.fullName,
        mobile_number: formData.mobileNumber,
        alternative_mobile_number: formData.alternativeMobileNumber,
        address: formData.address,
        pincode: formData.pincode
      });

      // Create order
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert({
          user_id: user.id,
          order_number: '', // Will be auto-generated by trigger
          subtotal: totalAmount,
          discount_amount: discount,
          total_amount: finalAmount,
          coupon_code: appliedCoupon,
          delivery_address: formData.address,
          delivery_pincode: formData.pincode,
          delivery_mobile: formData.mobileNumber,
          delivery_alternative_mobile: formData.alternativeMobileNumber || null,
          customer_name: formData.fullName,
          notes: formData.notes || null,
          payment_method: 'pending'
        })
        .select()
        .single();

      if (orderError) throw orderError;

      // Create order items
      const orderItems = cart.map(item => ({
        order_id: order.id,
        menu_item_id: item.id,
        quantity: item.quantity,
        price_at_time: item.price,
        item_name: item.name,
        item_category: item.category
      }));

      const { error: itemsError } = await supabase
        .from('order_items')
        .insert(orderItems);

      if (itemsError) throw itemsError;

      // Update coupon usage if applied
      if (appliedCoupon) {
        await supabase.rpc('increment_coupon_usage', {
          coupon_code_param: appliedCoupon
        });
      }

      clearCart();
      toast.success(`Order placed successfully! Order #${order.order_number}`);
      navigate("/");
    } catch (error: any) {
      toast.error("Failed to place order. Please try again.");
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <Header />
      
      <section className="py-12 px-6">
        <div className="max-w-5xl mx-auto">
          <h1 className="font-playfair text-4xl font-bold text-foreground mb-8">
            Checkout
          </h1>

          <div className="grid md:grid-cols-3 gap-8">
            <div className="md:col-span-2">
              <Card className="shadow-soft">
                <CardHeader>
                  <CardTitle>Delivery Details</CardTitle>
                </CardHeader>
                <CardContent>
                  <form onSubmit={handleSubmit} className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="fullName">Full Name *</Label>
                      <Input
                        id="fullName"
                        required
                        value={formData.fullName}
                        onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
                      />
                    </div>

                    <div className="grid md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="mobile">Mobile Number *</Label>
                        <Input
                          id="mobile"
                          type="tel"
                          required
                          pattern="[0-9]{10}"
                          value={formData.mobileNumber}
                          onChange={(e) => setFormData({ ...formData, mobileNumber: e.target.value })}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="altMobile">Alternative Mobile</Label>
                        <Input
                          id="altMobile"
                          type="tel"
                          pattern="[0-9]{10}"
                          value={formData.alternativeMobileNumber}
                          onChange={(e) => setFormData({ ...formData, alternativeMobileNumber: e.target.value })}
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="address">Delivery Address *</Label>
                      <Textarea
                        id="address"
                        required
                        rows={3}
                        value={formData.address}
                        onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="pincode">Pincode *</Label>
                      <Input
                        id="pincode"
                        required
                        pattern="[0-9]{6}"
                        maxLength={6}
                        value={formData.pincode}
                        onChange={(e) => setFormData({ ...formData, pincode: e.target.value })}
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="notes">Order Notes (Optional)</Label>
                      <Textarea
                        id="notes"
                        rows={2}
                        placeholder="Any special instructions..."
                        value={formData.notes}
                        onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                      />
                    </div>

                    <Button type="submit" className="w-full" size="lg" disabled={loading}>
                      {loading ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Processing...
                        </>
                      ) : (
                        "Place Order"
                      )}
                    </Button>
                  </form>
                </CardContent>
              </Card>
            </div>

            <div className="space-y-6">
              <Card className="shadow-soft">
                <CardHeader>
                  <CardTitle>Apply Coupon</CardTitle>
                </CardHeader>
                <CardContent>
                  {appliedCoupon ? (
                    <div className="space-y-3">
                      <div className="flex items-center gap-2 p-3 bg-primary/10 rounded-lg">
                        <Tag className="h-5 w-5 text-primary" />
                        <span className="font-semibold">{appliedCoupon}</span>
                      </div>
                      <Button variant="outline" onClick={handleRemoveCoupon} className="w-full">
                        Remove Coupon
                      </Button>
                    </div>
                  ) : (
                    <div className="flex gap-2">
                      <Input
                        placeholder="Enter coupon code"
                        value={couponCode}
                        onChange={(e) => setCouponCode(e.target.value.toUpperCase())}
                      />
                      <Button onClick={handleApplyCoupon}>Apply</Button>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card className="shadow-elegant border-2 border-primary/20">
                <CardHeader>
                  <CardTitle>Order Summary</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex justify-between text-muted-foreground">
                    <span>Subtotal:</span>
                    <span>₹{totalAmount.toFixed(2)}</span>
                  </div>
                  {discount > 0 && (
                    <div className="flex justify-between text-primary">
                      <span>Discount:</span>
                      <span>-₹{discount.toFixed(2)}</span>
                    </div>
                  )}
                  <div className="border-t pt-3 flex justify-between text-lg font-bold">
                    <span>Total:</span>
                    <span className="text-primary">₹{finalAmount.toFixed(2)}</span>
                  </div>
                  <div className="text-sm text-muted-foreground pt-2">
                    {cart.length} items in cart
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </section>

      <Footer />
    </div>
  );
};

export default Checkout;
